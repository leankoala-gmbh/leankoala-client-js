import { TRepositories } from './typescript/interfaces/global/repos';
import { IClientConnectArgs, IRepositoryCollectionRepos } from './typescript/interfaces/360ApiClient.interface';
export declare class LeankoalaClient {
    private _clusterConnection;
    private _masterConnection;
    private _user;
    private _companies;
    private _currentCompany;
    private readonly _axios;
    private readonly _environment;
    private _connectionStatus;
    private readonly _registeredEventListeners;
    private _masterToken;
    private readonly _routes;
    private _repositoryCollection;
    private _masterUser;
    private _refreshToken;
    constructor(environment?: string);
    connect(args: IClientConnectArgs): Promise<void>;
    isConnected(): boolean;
    setLanguage(language: any): void;
    getWakeUpToken(): string;
    private _initConnection;
    private _initConnectionViaWakeUpToken;
    private _initConnectionViaCredentials;
    private _initConnectionViaRefreshToken;
    private _initConnectionViaMasterTokens;
    private _autoSelectCompany;
    switchCompany(companyId: string): Promise<void>;
    private _switchCluster;
    private _getMasterServer;
    private _registerConnectionListeners;
    getRepository<T extends TRepositories>(entityType: T): Promise<IRepositoryCollectionRepos[T]>;
    private _sleep;
    getUser(): any;
    getCompany(): boolean;
    on(eventName: string, callback: CallableFunction): void;
    fetchAll(promises: any): Promise<any>;
    isWakeUpTokenExpired(token: any): boolean;
    setRefreshToken(token: string): void;
}
